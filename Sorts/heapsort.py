def heapify(arr, n, i):
    largest = i
    l = 2 * i + 1
    r = 2 * i + 2

    if l < n and arr[i] < arr[l]:
        largest = l

    if r < n and arr[largest] < arr[r]:
        largest = r

    if largest != i:
        arr[i],arr[largest] = arr[largest],arr[i]
        heapify(arr, n, largest)

def heapSort(arr):
    n = len(arr)

    for i in range(n // 2 - 1, -1, -1):
        heapify(arr, n, i)

    for i in range(n-1, 0, -1):
        arr[i], arr[0] = arr[0], arr[i]
        heapify(arr, i, 0)

arr = [ 12, 11, 13, 5, 6, 7]
print("Array: ", arr)
heapSort(arr)
n = len(arr)
print("Sorted array: ", arr)

# Це метод сортування порівнянням, що ґрунтується на такій структурі даних як двійкова купа.
# Cпочатку шукаємо максимальний елемент і поміщаємо його в кінець. Далі ми повторюємо ту ж операцію для елементів, що залишилися.

# Основні переваги пірамідального сортування:
# Ефективність виконання на великих масивах даних.
# Не потребує додаткової пам'яті для сортування масиву.

# Основні недоліки пірамідального сортування:
# Він може бути повільним для малих масивів даних.
# Не стійкий до зміни порядку вже сортованого масиву.

# Гірший, середній, найкращий час - O(n log(n))
# Просторова складність - O(n)
# Допоміжний простір - O(1)